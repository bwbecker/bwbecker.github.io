<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Json | Hard-Won Scala + Play]]></title>
  <link href="http://bwbecker.github.io/blog/categories/json/atom.xml" rel="self"/>
  <link href="http://bwbecker.github.io/"/>
  <updated>2015-08-29T07:27:38-04:00</updated>
  <id>http://bwbecker.github.io/</id>
  <author>
    <name><![CDATA[Byron Weber Becker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Postgres Enums and Anorm, Part 2]]></title>
    <link href="http://bwbecker.github.io/blog/2015/05/06/postgres-enums-and-anorm/"/>
    <updated>2015-05-06T09:19:12-04:00</updated>
    <id>http://bwbecker.github.io/blog/2015/05/06/postgres-enums-and-anorm</id>
    <content type="html"><![CDATA[<p>I went to implement my enumerations discoveries as chronicalled in
<a href="http://bwbecker.github.io/blog/2015/05/05/postgres-enums-and-anorm/">Postgres Enums and Anorm</a>
and realized anew something that had niggled away in the back of my brain:  I&rsquo;m working
with data from a legacy database and most of the enumerations are indecipherable.  Many of
the enumerations are like this:</p>

<pre><code class="sql  Listing 1">CREATE TYPE _quest.quest_instruction_mode AS ENUM
   ('P',
    'CO');
</code></pre>

<p>where &lsquo;P&rsquo; stands for (as far as we can tell!) &ldquo;in-Person&rdquo; and &lsquo;CO&rsquo; stands for &ldquo;Course-Online&rdquo;.</p>

<p>So naturally, I&rsquo;d like an intelligible Scala enumeration such as</p>

<pre><code class="scala  Listing 2">object InstructionMode extends DbEnum {
  type InstructionMode = Value

  val InPerson = Value("P")
  val Online = Value("CO")
}
</code></pre>

<p>But here&rsquo;s the rub:  <code>println(InstructionMode.Online)</code> still prints the indecipherable <code>CO</code>.</p>

<!-- more -->


<p>The goals I&rsquo;m pursuing are:</p>

<ul>
<li>Easy interoperability between Posgres enumerations and Scala enumerations.</li>
<li>Printing meaningful values from my program rather than the obscure codes kept in the database.</li>
<li>Minimal code duplication or bloat.</li>
</ul>


<p>Here&rsquo;s my solution.  As in my <a href="http://bwbecker.github.io/blog/2015/05/05/postgres-enums-and-anorm/">previous post</a>,
I&rsquo;m adding a common superclass to my enumerations that itself extends Scala&rsquo;s <code>Enumeration</code> class.  The difference
this time is that I&rsquo;ve defined an abstract type, <code>myType</code>, and an abstract list that will contain the codes
actually used in the database.  This allows me to do almost all of the work in the superclass, provided I
have one function: <code>unapply</code> takes a string (the one stored in the database) and returns a value from the
Scala enumeration.</p>

<p>A typical Scala enumeration now looks like this:</p>

<pre><code class="scala Listing 3">object InstructionMode extends DbEnum {
  type InstructionMode = Value

  val InPerson, Online = Value

  protected type myType = Value
  protected val dbValues = Array("P", "CO")
  protected def unapply(s: String): myType = InstructionMode(dbValues.indexOf(s))
}
</code></pre>

<p>Notes:</p>

<ul>
<li>Line 1 extends <code>DbEnum</code> rather than <code>Enumeration</code>.</li>
<li>Thanks to line 4, printing the enumeration&rsquo;s values will give a meaningful result,
either &ldquo;InPerson&rdquo; or &ldquo;Online&rdquo;.</li>
<li>Line 6 defines the abstract type we&rsquo;ll need in <code>DbEnum</code>.  This line is the same in every enum but
is needed because <code>Value</code> is different for every enum.</li>
<li>Line 7 defines the values actually contained in the database.  They need to be in
the same order as the values specified in line 4.</li>
<li>Line 8 is the <code>unapply</code> function.  In all of my cases, it&rsquo;s exactly as shown here
except for the obvious substitution for <code>InstructionMode</code>.</li>
</ul>


<p>The requirement that the order of values in lines 4 and 7 match is a problem, in my mind.
There&rsquo;s no question that this can be a source of bugs.  But I&rsquo;m out of ideas for how to
improve it.  If you have some, please comment!  I&rsquo;d also appreciate insight into how
the name <code>InPerson</code> is captured and put into a map in the <code>Enumeration</code> class.  There&rsquo;s
still something going on there that I don&rsquo;t understand but I&rsquo;d like to!</p>

<p>Finally, the code for <code>DbEnum</code> is:</p>

<pre><code class="scala Listing4: DbEnum.scala">abstract class DbEnum extends Enumeration {

  protected type myType &lt;: Enumeration#Value
  protected val dbValues: Array[String]
  protected def unapply(s: String): myType

  /**
   * Create an implicit to help with converting this Scala enum into the equivalent
   * Postgres enum.
   */
  implicit val toStatement = new ToStatement[myType] {
    def set(s: java.sql.PreparedStatement, index: Int, aValue: myType): Unit = {
      s.setObject(index, dbValues(aValue.id), java.sql.Types.OTHER)
    }
  }

  /**
   * Convert a database enumeration to a Scala enumeration.
   * @param convert A conversion function from a string (the value received from the database) to E (the Scala enum).
   */
  implicit def enumToType(implicit m: Manifest[myType]): Column[myType] = Column {
    (value, meta) =&gt;
      val MetaDataItem(qualified, nullable, clazz) = meta

      try {
        val s = value.asInstanceOf[String]
        eitherToError(Right(unapply(s))): MayErr[SqlRequestError, myType]
      } catch {
        case e: Exception =&gt;
          eitherToError(Left(TypeDoesNotMatch("Cannot convert " + value + ":" +
            value.asInstanceOf[AnyRef].getClass + " to " +
            m.runtimeClass.getSimpleName + " for column " +
            qualified)))
      }
  }

  /**
   * Create a json Reads to read instances of this enumeration from JSON.
   */
  implicit val reads = new Reads[myType] {
    def reads(json: JsValue): JsResult[myType] = json match {
      case s: JsString =&gt;
        val enum = unapply(s.value)
        JsSuccess(enum)
      case x =&gt; JsError(s"Expected a string; got $x.")
    }
  }
}
</code></pre>

<ul>
<li>Lines 3-5 define the abstract members that need to be defined in each
of the individual enumerations.</li>
<li>The definitions of <code>toStatement</code> and <code>enumToType</code> are very much the same
as in the <a href="http://bwbecker.github.io/blog/2015/05/05/postgres-enums-and-anorm/">previous post</a>
except that with the new definition of <code>myType</code> we have all the information to move everything
into <code>DbEnum</code>.</li>
<li>This implementation contains a bonus:  Lines 40-47 contain a function that reads
the enumeration from a json blob.  That&rsquo;s also central to how I&rsquo;m dealing with my database
and will, no doubt, be the subject of a future post.</li>
</ul>


<p>That&rsquo;s it!  Enjoy!</p>
]]></content>
  </entry>
  
</feed>
