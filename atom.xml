<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hard-Won Scala + Play]]></title>
  <link href="http://bwbecker.github.io/atom.xml" rel="self"/>
  <link href="http://bwbecker.github.io/"/>
  <updated>2015-08-29T07:27:38-04:00</updated>
  <id>http://bwbecker.github.io/</id>
  <author>
    <name><![CDATA[Byron Weber Becker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Submit on Enter With Twitter's Typeahead Widget]]></title>
    <link href="http://bwbecker.github.io/blog/2015/08/29/pain-with-twitter-typeahead-widget/"/>
    <updated>2015-08-29T05:40:03-04:00</updated>
    <id>http://bwbecker.github.io/blog/2015/08/29/pain-with-twitter-typeahead-widget</id>
    <content type="html"><![CDATA[<p>Twitter&rsquo;s <a href="https://twitter.github.io/typeahead.js/">Typeahead widget</a> adds suggestions to an input
field based on what the user has already typed.  We&rsquo;re all familiar with such widgets from
Google searches, for example.</p>

<p><img class="right" src="http://bwbecker.github.io/images/typeahead_example.png" title="'Typeahead Example'" ></p>

<p>I thought it would be easy to set up and get going.  Indeed, seeing first (promising) results
went really quickly.  But then I spent the rest of the day figuring out the corner cases that
weren&rsquo;t handled and Dr. Google didn&rsquo;t provide answers for.</p>

<p>The Typeahead use case seems to be one input field in a larger form.  It helps find the correct
value for that field but something else in the form handles the submission.</p>

<p>My use case is a different but very common one &ndash; search.  The form has a single search field
used to search for, in my case, a person.  The search could be on one of the unique identifiers
(a number or alphameric userid) or based on a name.  The name is where the typeahead is needed.
Once the user has found the right person (perhaps by selecting off the typeahead list), hit
enter and it&rsquo;s submitted.</p>

<p>The hard part was getting it to play nicely with the keyboard:  Submit on enter, submit the correct
suggestion if chosen with the arrow keys, avoid resubmitting contents the are already in the form
from a previous submission.</p>

<p>Finally, when the submission occurs it should be with the userid for uniqueness.  Each user&rsquo;s
userid is returned from my suggestion web service along with the name.</p>

<!-- More -->


<p>I think the basic issue is Typeahead&rsquo;s event model and API is incomplete.  I kept looking
in the documentation for two things:</p>

<ol>
<li>A method to get the current suggestion</li>
<li>An event that says &ldquo;Here&rsquo;s the suggestion that was chosen&rdquo;</li>
</ol>


<p>I found the <code>typeahead:change</code> event to be useless.  I could not figure out how it gets
triggered.</p>

<p>The <code>typeahead:select</code> and <code>typeahead:autocomplete</code> were useful for when the user hit
tab or clicked in another field.  But not when they hit the enter key.</p>

<p>My suggestions web service returns json lists such as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>  <span class="s2">&quot;surname&quot;</span><span class="o">:</span> <span class="s2">&quot;Bailey&quot;</span><span class="p">,</span> <span class="s2">&quot;givennames&quot;</span><span class="o">:</span> <span class="s2">&quot;Bea&quot;</span><span class="p">,</span> <span class="s2">&quot;userid&quot;</span><span class="o">:</span> <span class="s2">&quot;bbailey&quot;</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>  <span class="s2">&quot;surname&quot;</span><span class="o">:</span> <span class="s2">&quot;Barker&quot;</span><span class="p">,</span> <span class="s2">&quot;givennames&quot;</span><span class="o">:</span> <span class="s2">&quot;Bob&quot;</span><span class="p">,</span> <span class="s2">&quot;userid&quot;</span><span class="o">:</span> <span class="s2">&quot;babarker&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The HTML is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div&gt;&lt;form</span> <span class="na">action=</span><span class="s">&quot;/search&quot;</span> <span class="na">method=</span><span class="s">&quot;GET&quot;</span> <span class="na">id=</span><span class="s">&quot;search&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">id=</span><span class="s">&quot;searchTerm&quot;</span> <span class="na">name=</span><span class="s">&quot;searchTerm&quot;</span> <span class="na">value=</span><span class="s">&quot;&quot;</span>
</span><span class='line'>      <span class="na">class=</span><span class="s">&quot;search form-control typeahead&quot;</span> <span class="na">autocomplete=</span><span class="s">&quot;off&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/form&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the Javascript I finally came up with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">asisJS</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">initSearchTypeahead</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * A hack to keep track of the currently selected userid</span>
</span><span class='line'><span class="cm">     * when the cursor keys are moved.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">currentQuery</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * Cursor moved down the list of suggestions.  Keep track</span>
</span><span class='line'><span class="cm">     * of the current suggestion in currentQuery</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">logCursorChange</span><span class="p">(</span><span class="nx">ev</span><span class="p">,</span> <span class="nx">suggestion</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">suggestion</span> <span class="o">==</span> <span class="s1">&#39;undefined&#39;</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">currentQuery</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">currentQuery</span> <span class="o">=</span> <span class="nx">suggestion</span><span class="p">.</span><span class="nx">userid</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * User triggered a submit, either via the typeahead:submit </span>
</span><span class='line'><span class="cm">     * or autocomplete event</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">submitSuggestion</span><span class="p">(</span><span class="nx">ev</span><span class="p">,</span> <span class="nx">suggestion</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#searchTerm&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="nx">suggestion</span><span class="p">.</span><span class="nx">userid</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#search&#39;</span><span class="p">).</span><span class="nx">submit</span><span class="p">();</span>    <span class="c1">// submit the form</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * Initialize the search field with the typeahead widget</span>
</span><span class='line'><span class="cm">     * The source function is hacked so it gets hits if the first</span>
</span><span class='line'><span class="cm">     * character is in [A-Z] (a name).  Otherwise (eg uwid, userid, etc)</span>
</span><span class='line'><span class="cm">     * it does not.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#searchTerm&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">typeahead</span><span class="p">(</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nx">minLength</span><span class="o">:</span> <span class="mi">1</span>
</span><span class='line'>      <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Where to get the typeahead suggestions</span>
</span><span class='line'>        <span class="nx">source</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">query</span><span class="p">,</span> <span class="nx">processSync</span><span class="p">,</span> <span class="nx">processAsync</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// If the field has contents (eg &quot;who&quot;) that will be stored</span>
</span><span class='line'>          <span class="c1">// in currentQuery before the user starts to type.  Don&#39;t want that.</span>
</span><span class='line'>          <span class="nx">currentQuery</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">query</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="s2">&quot;A&quot;</span> <span class="o">&amp;&amp;</span> <span class="nx">query</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="s2">&quot;Z&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Get the autocomplete;  We don&#39;t have any synchronous</span>
</span><span class='line'>            <span class="c1">// suggestions.  Call the suggestion API to get 10 suggestions</span>
</span><span class='line'>            <span class="c1">// given the contents of the query.  The query may contain</span>
</span><span class='line'>            <span class="c1">// spaces, letters, and numbers -- nothing else.  Replace</span>
</span><span class='line'>            <span class="c1">// the spaces with _ for http transport.</span>
</span><span class='line'>            <span class="nx">processSync</span><span class="p">([]);</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/api/v2/student/&#39;</span> <span class="o">+</span> <span class="nx">query</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/ /g</span><span class="p">,</span> <span class="s1">&#39;_&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;/typeahead/10&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="kd">function</span> <span class="p">(</span><span class="nx">json</span><span class="p">)</span> <span class="p">{</span>  <span class="nx">processAsync</span><span class="p">(</span><span class="nx">json</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>  <span class="p">}</span>
</span><span class='line'>            <span class="p">);</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Not a name; don&#39;t do the autocomplete</span>
</span><span class='line'>            <span class="nx">processSync</span><span class="p">([]);</span>
</span><span class='line'>            <span class="nx">processAsync</span><span class="p">([]);</span>
</span><span class='line'>            <span class="nx">currentQuery</span> <span class="o">=</span> <span class="nx">query</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// How to display a suggestion</span>
</span><span class='line'>        <span class="nx">display</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">suggestion</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">suggestion</span><span class="p">.</span><span class="nx">surname</span> <span class="o">+</span> <span class="s2">&quot;, &quot;</span> <span class="o">+</span> <span class="nx">suggestion</span><span class="p">.</span><span class="nx">givennames</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Bug in Typeahead.</span>
</span><span class='line'>        <span class="c1">// See https://github.com/twitter/typeahead.js/issues/1232</span>
</span><span class='line'>        <span class="nx">limit</span><span class="o">:</span> <span class="mi">20</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">//Catch typeahead events</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;typeahead:select&#39;</span><span class="p">,</span> <span class="nx">submitSuggestion</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;typeahead:autocomplete&#39;</span><span class="p">,</span> <span class="nx">submitSuggestion</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;typeahead:cursorchange&#39;</span><span class="p">,</span> <span class="nx">logCursorChange</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Submit the form if the user hits &quot;enter&quot;</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;keydown&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">which</span> <span class="o">===</span> <span class="mi">13</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">currentQuery</span> <span class="o">===</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Trigger the default (first) suggestion</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.tt-suggestion:first-child&#39;</span><span class="p">).</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// The suggestion they chose with arrow keys</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#searchTerm&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="nx">currentQuery</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#search&#39;</span><span class="p">).</span><span class="nx">submit</span><span class="p">();</span>    <span class="c1">// submit the form</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>    <span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Select any text already in the textbox (eg from error handling)</span>
</span><span class='line'>    <span class="c1">// when the page loads.</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#searchTerm&#39;</span><span class="p">).</span><span class="nx">focus</span><span class="p">().</span><span class="nx">select</span><span class="p">();</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">initSearchTypeahead</span><span class="o">:</span> <span class="nx">initSearchTypeahead</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>There you have it;  hope it&rsquo;s been helpful!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Painful Switch From Eclipse to Idea IDE]]></title>
    <link href="http://bwbecker.github.io/blog/2015/05/28/painful-switch-from-eclipse-to-idea-ide/"/>
    <updated>2015-05-28T07:49:06-04:00</updated>
    <id>http://bwbecker.github.io/blog/2015/05/28/painful-switch-from-eclipse-to-idea-ide</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using Eclipse for my Play! + Scala development, but frustration reached the tipping point and I decided to give <a href="https://www.jetbrains.com/idea/">IDEA</a> a try.  It had been highly recommended by fellow developers at a Scala Meetup (now defunct, sadly).  The conversion process has been painful, with some hard-won lessons to report.</p>

<p>So, what drove me around the bend with Eclipse?  One more bout with it reporting
many false positive compilation errors with no easy way to reset things that I could find.  SBT would give a completely clean compile;  Eclipse would report dozens of errors spread over many, many files.  That, and I can be a sucker for new toys.</p>

<!-- more -->


<h2>IDEA Installation</h2>

<p>These comments are based on IDEA version 14.1.3 and the Scala plugin 1.5.1.</p>

<p>The IDEA installation was painful.  Here&rsquo;s what I learned:</p>

<ol>
<li><p><strong>Out of date documentation</strong>:  There is <em>a lot</em> of documentation on the IDEA web site; much of it woefully
out of date.  For example, a Google search for &ldquo;intellij idea scala play&rdquo; landed me at a
features page touting <a href="https://www.jetbrains.com/idea/features/scala.html">IDEA 13</a>
with links to a
<a href="https://confluence.jetbrains.com/display/IntelliJIDEA/Scala">tutorial</a> posted
in 2013.  As the comments at the bottom of the page atest, it&rsquo;s not applicable.</p>

<p>If I had landed at this <a href="https://www.jetbrains.com/idea/features/play_framework.html">features overview</a> instead, things would have been somewhat
less rocky.</p></li>
<li><p><strong>Ultimate Edition required</strong>:  Working with Play! requires the Ultimate Edition.  This
tidbit is well hidden.  This <a href="https://www.jetbrains.com/idea/features/play_framework.html">Play! plugin page</a>,
for example, touts support for templates, routes files, etc.  No where does it mention that the
Community Edition won&rsquo;t work and the download button at the bottom offers both versions, implying
that either will work.  The linked
<a href="https://confluence.jetbrains.com/display/IntelliJIDEA/Play+Framework+2.0">tutorial</a> doesn&rsquo;t mention it either.</p>

<p>It <em>is</em> found on the <a href="http://blog.jetbrains.com/scala/2014/09/17/scala-and-play-2-0-plugin-for-intellij-idea-14-eap-is-out/">Scala plugin blog</a>.  It&rsquo;s the last sentence of a paragraph that you need to scroll to see.</p></li>
<li><p><strong>Run Play2 App</strong> may or may not appear in the context menu, as the documentation
on the <a href="https://www.playframework.com/documentation/2.4.x/IDE">Play! website</a> and the
<a href="https://confluence.jetbrains.com/download/attachments/49455798/PlayRunningApp.png?version=1&amp;modificationDate=1397129336000">IntelliJ tutorial</a>
indicate.  I needed to create a run configuration on my own, first:</p>

<ol>
<li>Go to &ldquo;Run &ndash;> Edit Configurations&hellip;&rdquo;</li>
<li>Hit the &ldquo;+&rdquo; sign and choose &ldquo;Play2 App&rdquo; from the drop-down.</li>
<li>Give it a name and accept the defaults.</li>
</ol>


<p>I still don&rsquo;t find it in the context menu, but it does appear in the Run
menu.</p></li>
</ol>


<p>In retrospect, these are little things.  At the time, however, they were confusing and
chewed up time I could have better spent elsewhere.</p>

<h2>Experience</h2>

<p>I&rsquo;m still getting used to IDEA, but here are some initial observations:</p>

<ol>
<li>IDEA has a number of code-smell filters (&ldquo;inspections&rdquo;).  Some of them led to code
improvements.  I wish the hover that describes the problem wasn&rsquo;t so sensitive.  It
disappears quite easily.</li>
<li>There are some false positive type errors &ndash; the same thing that drove me around the
bend with Eclipse.  So far they are isolated cases rather than the whole system
going bonkers as sometimes happened in Eclipse.</li>
<li>I like nested helper functions.  The Eclipse Outline view shows them;  IDEA&rsquo;s
Structure view (the closest equivalent) does not.</li>
<li>IDEA detects as soon as I use something that hasn&rsquo;t been imported.  So far it&rsquo;s made
good guesses when it offers to automatically add the import.</li>
<li>It seems snappier for editing, but slower than SBT for compiling.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Postgres Enums and Anorm, Part 2]]></title>
    <link href="http://bwbecker.github.io/blog/2015/05/06/postgres-enums-and-anorm/"/>
    <updated>2015-05-06T09:19:12-04:00</updated>
    <id>http://bwbecker.github.io/blog/2015/05/06/postgres-enums-and-anorm</id>
    <content type="html"><![CDATA[<p>I went to implement my enumerations discoveries as chronicalled in
<a href="http://bwbecker.github.io/blog/2015/05/05/postgres-enums-and-anorm/">Postgres Enums and Anorm</a>
and realized anew something that had niggled away in the back of my brain:  I&rsquo;m working
with data from a legacy database and most of the enumerations are indecipherable.  Many of
the enumerations are like this:</p>

<figure class='code'><figcaption><span>Listing 1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TYPE</span> <span class="n">_quest</span><span class="p">.</span><span class="n">quest_instruction_mode</span> <span class="k">AS</span> <span class="n">ENUM</span>
</span><span class='line'>   <span class="p">(</span><span class="s1">&#39;P&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;CO&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>where &lsquo;P&rsquo; stands for (as far as we can tell!) &ldquo;in-Person&rdquo; and &lsquo;CO&rsquo; stands for &ldquo;Course-Online&rdquo;.</p>

<p>So naturally, I&rsquo;d like an intelligible Scala enumeration such as</p>

<figure class='code'><figcaption><span>Listing 2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">InstructionMode</span> <span class="k">extends</span> <span class="nc">DbEnum</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">type</span> <span class="kt">InstructionMode</span> <span class="o">=</span> <span class="nc">Value</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="nc">InPerson</span> <span class="k">=</span> <span class="nc">Value</span><span class="o">(</span><span class="s">&quot;P&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="nc">Online</span> <span class="k">=</span> <span class="nc">Value</span><span class="o">(</span><span class="s">&quot;CO&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But here&rsquo;s the rub:  <code>println(InstructionMode.Online)</code> still prints the indecipherable <code>CO</code>.</p>

<!-- more -->


<p>The goals I&rsquo;m pursuing are:</p>

<ul>
<li>Easy interoperability between Posgres enumerations and Scala enumerations.</li>
<li>Printing meaningful values from my program rather than the obscure codes kept in the database.</li>
<li>Minimal code duplication or bloat.</li>
</ul>


<p>Here&rsquo;s my solution.  As in my <a href="http://bwbecker.github.io/blog/2015/05/05/postgres-enums-and-anorm/">previous post</a>,
I&rsquo;m adding a common superclass to my enumerations that itself extends Scala&rsquo;s <code>Enumeration</code> class.  The difference
this time is that I&rsquo;ve defined an abstract type, <code>myType</code>, and an abstract list that will contain the codes
actually used in the database.  This allows me to do almost all of the work in the superclass, provided I
have one function: <code>unapply</code> takes a string (the one stored in the database) and returns a value from the
Scala enumeration.</p>

<p>A typical Scala enumeration now looks like this:</p>

<figure class='code'><figcaption><span>Listing 3</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">InstructionMode</span> <span class="k">extends</span> <span class="nc">DbEnum</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">type</span> <span class="kt">InstructionMode</span> <span class="o">=</span> <span class="nc">Value</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="nc">InPerson</span><span class="o">,</span> <span class="nc">Online</span> <span class="k">=</span> <span class="nc">Value</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">protected</span> <span class="k">type</span> <span class="kt">myType</span> <span class="o">=</span> <span class="nc">Value</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">val</span> <span class="n">dbValues</span> <span class="k">=</span> <span class="nc">Array</span><span class="o">(</span><span class="s">&quot;P&quot;</span><span class="o">,</span> <span class="s">&quot;CO&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">def</span> <span class="n">unapply</span><span class="o">(</span><span class="n">s</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">myType</span> <span class="o">=</span> <span class="nc">InstructionMode</span><span class="o">(</span><span class="n">dbValues</span><span class="o">.</span><span class="n">indexOf</span><span class="o">(</span><span class="n">s</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notes:</p>

<ul>
<li>Line 1 extends <code>DbEnum</code> rather than <code>Enumeration</code>.</li>
<li>Thanks to line 4, printing the enumeration&rsquo;s values will give a meaningful result,
either &ldquo;InPerson&rdquo; or &ldquo;Online&rdquo;.</li>
<li>Line 6 defines the abstract type we&rsquo;ll need in <code>DbEnum</code>.  This line is the same in every enum but
is needed because <code>Value</code> is different for every enum.</li>
<li>Line 7 defines the values actually contained in the database.  They need to be in
the same order as the values specified in line 4.</li>
<li>Line 8 is the <code>unapply</code> function.  In all of my cases, it&rsquo;s exactly as shown here
except for the obvious substitution for <code>InstructionMode</code>.</li>
</ul>


<p>The requirement that the order of values in lines 4 and 7 match is a problem, in my mind.
There&rsquo;s no question that this can be a source of bugs.  But I&rsquo;m out of ideas for how to
improve it.  If you have some, please comment!  I&rsquo;d also appreciate insight into how
the name <code>InPerson</code> is captured and put into a map in the <code>Enumeration</code> class.  There&rsquo;s
still something going on there that I don&rsquo;t understand but I&rsquo;d like to!</p>

<p>Finally, the code for <code>DbEnum</code> is:</p>

<figure class='code'><figcaption><span>Listing4: DbEnum.scala</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">DbEnum</span> <span class="k">extends</span> <span class="nc">Enumeration</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">protected</span> <span class="k">type</span> <span class="kt">myType</span> <span class="k">&lt;:</span> <span class="kt">Enumeration</span><span class="k">#</span><span class="kt">Value</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">val</span> <span class="n">dbValues</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">def</span> <span class="n">unapply</span><span class="o">(</span><span class="n">s</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">myType</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Create an implicit to help with converting this Scala enum into the equivalent</span>
</span><span class='line'><span class="cm">   * Postgres enum.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">toStatement</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">ToStatement</span><span class="o">[</span><span class="kt">myType</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">set</span><span class="o">(</span><span class="n">s</span><span class="k">:</span> <span class="kt">java.sql.PreparedStatement</span><span class="o">,</span> <span class="n">index</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">aValue</span><span class="k">:</span> <span class="kt">myType</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">s</span><span class="o">.</span><span class="n">setObject</span><span class="o">(</span><span class="n">index</span><span class="o">,</span> <span class="n">dbValues</span><span class="o">(</span><span class="n">aValue</span><span class="o">.</span><span class="n">id</span><span class="o">),</span> <span class="n">java</span><span class="o">.</span><span class="n">sql</span><span class="o">.</span><span class="nc">Types</span><span class="o">.</span><span class="nc">OTHER</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Convert a database enumeration to a Scala enumeration.</span>
</span><span class='line'><span class="cm">   * @param convert A conversion function from a string (the value received from the database) to E (the Scala enum).</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">def</span> <span class="n">enumToType</span><span class="o">(</span><span class="k">implicit</span> <span class="n">m</span><span class="k">:</span> <span class="kt">Manifest</span><span class="o">[</span><span class="kt">myType</span><span class="o">])</span><span class="k">:</span> <span class="kt">Column</span><span class="o">[</span><span class="kt">myType</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Column</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="n">meta</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="k">val</span> <span class="nc">MetaDataItem</span><span class="o">(</span><span class="n">qualified</span><span class="o">,</span> <span class="n">nullable</span><span class="o">,</span> <span class="n">clazz</span><span class="o">)</span> <span class="k">=</span> <span class="n">meta</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">s</span> <span class="k">=</span> <span class="n">value</span><span class="o">.</span><span class="n">asInstanceOf</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>
</span><span class='line'>        <span class="n">eitherToError</span><span class="o">(</span><span class="nc">Right</span><span class="o">(</span><span class="n">unapply</span><span class="o">(</span><span class="n">s</span><span class="o">)))</span><span class="k">:</span> <span class="kt">MayErr</span><span class="o">[</span><span class="kt">SqlRequestError</span>, <span class="kt">myType</span><span class="o">]</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">e</span><span class="k">:</span> <span class="kt">Exception</span> <span class="o">=&gt;</span>
</span><span class='line'>          <span class="n">eitherToError</span><span class="o">(</span><span class="nc">Left</span><span class="o">(</span><span class="nc">TypeDoesNotMatch</span><span class="o">(</span><span class="s">&quot;Cannot convert &quot;</span> <span class="o">+</span> <span class="n">value</span> <span class="o">+</span> <span class="s">&quot;:&quot;</span> <span class="o">+</span>
</span><span class='line'>            <span class="n">value</span><span class="o">.</span><span class="n">asInstanceOf</span><span class="o">[</span><span class="kt">AnyRef</span><span class="o">].</span><span class="n">getClass</span> <span class="o">+</span> <span class="s">&quot; to &quot;</span> <span class="o">+</span>
</span><span class='line'>            <span class="n">m</span><span class="o">.</span><span class="n">runtimeClass</span><span class="o">.</span><span class="n">getSimpleName</span> <span class="o">+</span> <span class="s">&quot; for column &quot;</span> <span class="o">+</span>
</span><span class='line'>            <span class="n">qualified</span><span class="o">)))</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Create a json Reads to read instances of this enumeration from JSON.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">reads</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Reads</span><span class="o">[</span><span class="kt">myType</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">reads</span><span class="o">(</span><span class="n">json</span><span class="k">:</span> <span class="kt">JsValue</span><span class="o">)</span><span class="k">:</span> <span class="kt">JsResult</span><span class="o">[</span><span class="kt">myType</span><span class="o">]</span> <span class="k">=</span> <span class="n">json</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">s</span><span class="k">:</span> <span class="kt">JsString</span> <span class="o">=&gt;</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">enum</span> <span class="k">=</span> <span class="n">unapply</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="n">value</span><span class="o">)</span>
</span><span class='line'>        <span class="nc">JsSuccess</span><span class="o">(</span><span class="n">enum</span><span class="o">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">x</span> <span class="k">=&gt;</span> <span class="nc">JsError</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Expected a string; got $x.&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Lines 3-5 define the abstract members that need to be defined in each
of the individual enumerations.</li>
<li>The definitions of <code>toStatement</code> and <code>enumToType</code> are very much the same
as in the <a href="http://bwbecker.github.io/blog/2015/05/05/postgres-enums-and-anorm/">previous post</a>
except that with the new definition of <code>myType</code> we have all the information to move everything
into <code>DbEnum</code>.</li>
<li>This implementation contains a bonus:  Lines 40-47 contain a function that reads
the enumeration from a json blob.  That&rsquo;s also central to how I&rsquo;m dealing with my database
and will, no doubt, be the subject of a future post.</li>
</ul>


<p>That&rsquo;s it!  Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accessing Anorm Without Play]]></title>
    <link href="http://bwbecker.github.io/blog/2015/05/05/accessing-anorm-without-play/"/>
    <updated>2015-05-05T10:40:25-04:00</updated>
    <id>http://bwbecker.github.io/blog/2015/05/05/accessing-anorm-without-play</id>
    <content type="html"><![CDATA[<p>Ever want to use Anorm to access a database without all the overhead of Play?<br/>
I did in my
<a href="http://bwbecker.github.io/blog/2015/05/05/postgres-enums-and-anorm/">previous post</a>
where I played with Postgres enumerations.  Here&rsquo;s the code I used.</p>

<p>It has a couple of features:</p>

<ul>
<li>It reads the .pg_service.conf and .pgpass files from your home directory to find
a service definition and the appropriate passwords to use for the connection.  This
keeps passwords and such out of your code and out of your repository.</li>
<li>It mimics the <code>DB</code> class in Anorm to provide a database connection that you can
then use with Anorm.</li>
</ul>


<!-- more -->


<h2>DB class</h2>

<p>The <code>DB</code> class provides three methods:  two that get a connection and one that mimics <code>withConnection</code>
(<a href="https://www.playframework.com/documentation/2.3.x/api/scala/index.html#play.api.db.DB$">scaladoc</a>).
<code>withConnection</code> is the one I use the most (by far) because it handles closing the connection.</p>

<p><code>DB</code> assumes the postgres driver is available in the class path and uses <code>PgService</code> (see below) to
get the connection data.</p>

<p>Typical usage is as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>    <span class="k">val</span> <span class="n">db</span> <span class="k">=</span> <span class="nc">DB</span><span class="o">(</span><span class="s">&quot;local_dev&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">db</span><span class="o">.</span><span class="n">withConnection</span> <span class="o">{</span> <span class="k">implicit</span> <span class="n">conn</span> <span class="k">=&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="n">sql</span> <span class="k">=</span> <span class="nc">SQL</span><span class="s">&quot;&quot;&quot;insert into _oat.test_enum (note_category, sort_order) </span>
</span><span class='line'><span class="s">                VALUES  (${NoteCategory.Advisor}, ${SortOrder.Ascending}) RETURNING id&quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">id</span> <span class="k">=</span> <span class="n">sql</span><span class="o">.</span><span class="n">as</span><span class="o">(</span><span class="n">anorm</span><span class="o">.</span><span class="nc">SqlParser</span><span class="o">.</span><span class="n">scalar</span><span class="o">[</span><span class="kt">Long</span><span class="o">].</span><span class="n">singleOpt</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The &ldquo;local_dev&rdquo; that is passed to the <code>DB</code> constructor is the name of the postgres service
to find in the .pg_service.conf file.</p>

<p>And, here&rsquo;s the code for <code>DB</code>:</p>

<figure class='code'><figcaption><span>DB.scala</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">oatLib.db</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">java.sql.DriverManager</span>
</span><span class='line'><span class="k">import</span> <span class="nn">java.sql.Connection</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Lots of this is stolen from Play.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">DB</span><span class="o">(</span><span class="n">service</span><span class="k">:</span><span class="kt">String</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="n">pgService</span> <span class="k">=</span> <span class="nc">PgService</span><span class="o">(</span><span class="n">service</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="n">url</span> <span class="k">=</span> <span class="n">s</span><span class="s">&quot;jdbc:postgresql://${pgService.host}:${pgService.port}/${pgService.dbname}&quot;</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="n">user</span> <span class="k">=</span> <span class="n">pgService</span><span class="o">.</span><span class="n">user</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="n">password</span> <span class="k">=</span> <span class="n">pgService</span><span class="o">.</span><span class="n">password</span>
</span><span class='line'>
</span><span class='line'>  <span class="nc">Class</span><span class="o">.</span><span class="n">forName</span><span class="o">(</span><span class="s">&quot;org.postgresql.Driver&quot;</span><span class="o">).</span><span class="n">newInstance</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Retrieves a JDBC connection.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * Don&#39;t forget to release the connection at some point by calling close().</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * @return a JDBC connection</span>
</span><span class='line'><span class="cm">   * @throws an error if the required data source is not registered</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">getConnection</span><span class="o">()</span><span class="k">:</span> <span class="kt">Connection</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">props</span> <span class="k">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="nc">Properties</span><span class="o">();</span>
</span><span class='line'>    <span class="n">props</span><span class="o">.</span><span class="n">setProperty</span><span class="o">(</span><span class="s">&quot;user&quot;</span><span class="o">,</span> <span class="n">user</span><span class="o">);</span>
</span><span class='line'>    <span class="n">props</span><span class="o">.</span><span class="n">setProperty</span><span class="o">(</span><span class="s">&quot;password&quot;</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">DriverManager</span><span class="o">.</span><span class="n">getConnection</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">props</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Retrieves a JDBC connection.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * Don&#39;t forget to release the connection at some point by calling close().</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * @param autocommit when `true`, sets this connection to auto-commit</span>
</span><span class='line'><span class="cm">   * @return a JDBC connection</span>
</span><span class='line'><span class="cm">   * @throws an error if the required data source is not registered</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">getConnection</span><span class="o">(</span><span class="n">autocommit</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span><span class="k">:</span> <span class="kt">Connection</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">connection</span> <span class="k">=</span> <span class="k">this</span><span class="o">.</span><span class="n">getConnection</span>
</span><span class='line'>    <span class="n">connection</span><span class="o">.</span><span class="n">setAutoCommit</span><span class="o">(</span><span class="n">autocommit</span><span class="o">)</span>
</span><span class='line'>    <span class="n">connection</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Execute a block of code, providing a JDBC connection. The connection and all created statements are</span>
</span><span class='line'><span class="cm">   * automatically released.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * @param name The datasource name.</span>
</span><span class='line'><span class="cm">   * @param block Code block to execute.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">withConnection</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">block</span><span class="k">:</span> <span class="kt">Connection</span> <span class="k">⇒</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">connection</span> <span class="k">=</span> <span class="n">getConnection</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">block</span><span class="o">(</span><span class="n">connection</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">connection</span><span class="o">.</span><span class="n">close</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>PgService class</h2>

<p>The <code>apply</code> method looks in your home directory for the <code>.pg_service.conf</code> and
<code>.pgpass</code> files.  The postgres programs that use <code>.pgpass</code> have a sophisticated
matching algorithm to choose the specific password required based on the
database, user, port, etc.  I doubt that I&rsquo;ve completely reverse engineered
that algorithm, but I believe this comes pretty close.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">oatLib.db</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.io.</span><span class="o">{</span> <span class="nc">Source</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Read the service information from the account&#39;s pg_service.conf</span>
</span><span class='line'><span class="cm"> * and pgpass files.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * It assumes they&#39;re are ~/.pg_service.conf and ~/.pgpass.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">PgService</span><span class="o">(</span><span class="n">service</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>                     <span class="n">host</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>                     <span class="n">port</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span>
</span><span class='line'>                     <span class="n">dbname</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>                     <span class="n">user</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>                     <span class="n">password</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">PgService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   *  Get the details for the named service from the combination of</span>
</span><span class='line'><span class="cm">   *  the service source (svcFile) and the password source (pwdFile).</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">apply</span><span class="o">(</span><span class="n">service</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">svcFile</span><span class="k">:</span> <span class="kt">Source</span><span class="o">,</span> <span class="n">pwdFile</span><span class="k">:</span> <span class="kt">Source</span><span class="o">)</span><span class="k">:</span> <span class="kt">PgService</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="n">getService</span><span class="k">:</span> <span class="kt">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Suck in the services file, get rid of services before the one</span>
</span><span class='line'>      <span class="c1">// we want, take the one we want, turn it into a map of key-value</span>
</span><span class='line'>      <span class="c1">// pairs.</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">allSvc</span> <span class="k">=</span> <span class="n">svcFile</span><span class="o">.</span><span class="n">getLines</span><span class="o">.</span><span class="n">toList</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">dropLeadingSvc</span> <span class="k">=</span> <span class="n">allSvc</span><span class="o">.</span><span class="n">dropWhile</span><span class="o">(</span><span class="n">line</span> <span class="k">⇒</span> <span class="n">line</span> <span class="o">!=</span> <span class="n">s</span><span class="s">&quot;[$service]&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="n">dropWhile</span><span class="o">(</span><span class="n">line</span> <span class="k">⇒</span> <span class="n">line</span> <span class="o">==</span> <span class="n">s</span><span class="s">&quot;[$service]&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">svcDef</span> <span class="k">=</span> <span class="n">dropLeadingSvc</span><span class="o">.</span><span class="n">takeWhile</span><span class="o">(</span><span class="n">line</span> <span class="k">⇒</span> <span class="n">line</span><span class="o">.</span><span class="n">matches</span><span class="o">(</span><span class="s">&quot;[^=]+=[^=]+&quot;</span><span class="o">))</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">svcDef2</span> <span class="k">=</span> <span class="n">svcDef</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">line</span> <span class="k">⇒</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="o">(</span><span class="sc">&#39;=&#39;</span><span class="o">)).</span><span class="n">map</span><span class="o">(</span><span class="n">a</span> <span class="k">⇒</span> <span class="o">(</span><span class="n">a</span><span class="o">(</span><span class="mi">0</span><span class="o">),</span> <span class="n">a</span><span class="o">(</span><span class="mi">1</span><span class="o">)))</span>
</span><span class='line'>      <span class="n">svcDef2</span><span class="o">.</span><span class="n">toMap</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">props</span> <span class="k">=</span> <span class="n">getService</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">props</span><span class="o">.</span><span class="n">isEmpty</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nc">Exception</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Unable to find a service configuration for $service&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">host</span> <span class="k">=</span> <span class="n">props</span><span class="o">(</span><span class="s">&quot;host&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">port</span> <span class="k">=</span> <span class="n">props</span><span class="o">(</span><span class="s">&quot;port&quot;</span><span class="o">).</span><span class="n">toInt</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">dbname</span> <span class="k">=</span> <span class="n">props</span><span class="o">(</span><span class="s">&quot;dbname&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">user</span> <span class="k">=</span> <span class="n">props</span><span class="o">(</span><span class="s">&quot;user&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">pwCandidates</span> <span class="k">=</span> <span class="n">pwdFile</span><span class="o">.</span><span class="n">getLines</span><span class="o">.</span><span class="n">toList</span>
</span><span class='line'>      <span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">matches</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;^([^:]*:){0}($host|\\*):.*&quot;</span><span class="o">))</span> <span class="c1">// matches host</span>
</span><span class='line'>      <span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">matches</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;^([^:]*:){1}($port|\\*):.*&quot;</span><span class="o">))</span> <span class="c1">// matches port</span>
</span><span class='line'>      <span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">matches</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;^([^:]*:){2}($dbname|\\*):.*&quot;</span><span class="o">))</span> <span class="c1">// matches dbname</span>
</span><span class='line'>      <span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">matches</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;^([^:]*:){3}($user|\\*):.*&quot;</span><span class="o">))</span> <span class="c1">// matches user</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">pwCandidates</span><span class="o">.</span><span class="n">isEmpty</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nc">Exception</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Unable to find a password for $host:$port:$dbname:$user&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">password</span> <span class="k">=</span> <span class="n">pwCandidates</span><span class="o">.</span><span class="n">headOption</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">split</span><span class="o">(</span><span class="sc">&#39;:&#39;</span><span class="o">)(</span><span class="mi">4</span><span class="o">)).</span><span class="n">getOrElse</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">new</span> <span class="nc">PgService</span><span class="o">(</span><span class="n">service</span><span class="o">,</span> <span class="n">host</span><span class="o">,</span> <span class="n">port</span><span class="o">,</span> <span class="n">dbname</span><span class="o">,</span> <span class="n">user</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Get the details for the named service from the default config</span>
</span><span class='line'><span class="cm">   * files (~/.pg_service.conf and ~/.pgpass).</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">apply</span><span class="o">(</span><span class="n">service</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">PgService</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">apply</span><span class="o">(</span><span class="n">service</span><span class="o">,</span>
</span><span class='line'>      <span class="nc">Source</span><span class="o">.</span><span class="n">fromFile</span><span class="o">(</span><span class="n">sys</span><span class="o">.</span><span class="n">env</span><span class="o">(</span><span class="s">&quot;HOME&quot;</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;/.pg_service.conf&quot;</span><span class="o">),</span>
</span><span class='line'>      <span class="nc">Source</span><span class="o">.</span><span class="n">fromFile</span><span class="o">(</span><span class="n">sys</span><span class="o">.</span><span class="n">env</span><span class="o">(</span><span class="s">&quot;HOME&quot;</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;/.pgpass&quot;</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it!  Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Postgres Enums and Anorm]]></title>
    <link href="http://bwbecker.github.io/blog/2015/05/05/postgres-enums-and-anorm/"/>
    <updated>2015-05-05T08:24:47-04:00</updated>
    <id>http://bwbecker.github.io/blog/2015/05/05/postgres-enums-and-anorm</id>
    <content type="html"><![CDATA[<p>Types are a wonderful thing in programming languages.  It&rsquo;s the main reason
I&rsquo;m using Scala.  Having the compiler do a proof that at least part of my
program is correct is a huge advantage over a dynamically typed language.</p>

<p>Databases can also make use of types &ndash; with similar advantages.  In my current
project we&rsquo;ve been
receiving data from a database that does not use types or other constraints
that are the hallmark of modern database design. What a mess!  Tables with
invalid values, or columns that are never null but nulls are nevertheless allowed,
or a column that allows nulls but represents them as either the empty string or a
string with one space in it rather than good &lsquo;ole <code>null</code>.</p>

<p>This blog post considers how to marry enumerations in a Postgres database
with a Scala program via the Anorm database access library.</p>

<blockquote><p>  Spoiler:  This is not what I actually implemented.  After you read
  this, be sure to read the <a href="http://bwbecker.github.io/blog/2015/05/06/postgres-enums-and-anorm/">follow-up</a></p></blockquote>

<!-- More -->


<h2>Defining Enumerations</h2>

<p>Let&rsquo;s start with defining enumerations.  The following SQL does it in
Postgres:</p>

<div class="aside">
    <b>Aside:</b> You&#8217;ll note a couple of oddities in the SQL.  They&#8217;re vestiages of
    the project I&#8217;m working on.  <code>_oat</code> is the database schema I use most frequently.  
    <code>std_note_category</code> and <code>oat_sort_order</code> are actual enums from my current project.
</div>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TYPE</span> <span class="n">_oat</span><span class="p">.</span><span class="n">std_note_category</span> <span class="k">AS</span> <span class="n">ENUM</span>
</span><span class='line'>   <span class="p">(</span><span class="s1">&#39;Auto&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;Advisor&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;CourseEntry&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TYPE</span> <span class="n">_oat</span><span class="p">.</span><span class="n">oat_sort_order</span> <span class="k">AS</span> <span class="n">ENUM</span>
</span><span class='line'>   <span class="p">(</span><span class="s1">&#39;ASC&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;DESC&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can create a quick test table with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">_oat</span><span class="p">.</span><span class="n">test_enum</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">id</span>               <span class="nb">SERIAL</span><span class="p">,</span>
</span><span class='line'>    <span class="n">note_category</span>     <span class="n">_oat</span><span class="p">.</span><span class="n">std_note_category</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>    <span class="n">sort_order</span>        <span class="n">_oat</span><span class="p">.</span><span class="n">oat_sort_order</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that one of columns is nullable, the other is not.</p>

<p>The database enumeration is mirrored by two Scala enumerations.  The first
one uses names that match the values in the database.  The second one
uses more descriptive names.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">NoteCategory</span> <span class="k">extends</span> <span class="nc">Enumeration</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">type</span> <span class="kt">NoteCategory</span> <span class="o">=</span> <span class="nc">Value</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="nc">Auto</span><span class="o">,</span> <span class="nc">Advisor</span><span class="o">,</span> <span class="nc">CourseEntry</span> <span class="k">=</span> <span class="nc">Value</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">SortOrder</span> <span class="k">extends</span> <span class="nc">Enumeration</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">type</span> <span class="kt">SortOrder</span> <span class="o">=</span> <span class="nc">Value</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="nc">Ascending</span> <span class="k">=</span> <span class="nc">Value</span><span class="o">(</span><span class="s">&quot;ASC&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="nc">Descending</span> <span class="k">=</span> <span class="nc">Value</span><span class="o">(</span><span class="s">&quot;DESC&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>First Attempt:  casting in the queries</h2>

<p>We can covert back and forth between the Scala enumerations and the
database enumerations, but it&rsquo;s painful.  Works like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">db</span><span class="o">.</span><span class="n">withConnection</span> <span class="o">{</span> <span class="k">implicit</span> <span class="n">conn</span> <span class="k">=&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Delete everything from the table</span>
</span><span class='line'>    <span class="nc">SQL</span><span class="s">&quot;&quot;&quot;truncate _oat.test_enum&quot;&quot;&quot;</span><span class="o">.</span><span class="n">execute</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Insert one of each</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">sql</span> <span class="k">=</span> <span class="nc">SQL</span><span class="s">&quot;&quot;&quot;insert into _oat.test_enum </span>
</span><span class='line'><span class="s">            (note_category, sort_order) VALUES  </span>
</span><span class='line'><span class="s">                (${NoteCategory.Advisor.toString}::_oat.std_note_category,</span>
</span><span class='line'><span class="s">                 ${SortOrder.Ascending.toString}::_oat.oat_sort_order</span>
</span><span class='line'><span class="s">                ) RETURNING id&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">id</span> <span class="k">=</span> <span class="n">sql</span><span class="o">.</span><span class="n">as</span><span class="o">(</span><span class="n">anorm</span><span class="o">.</span><span class="nc">SqlParser</span><span class="o">.</span><span class="n">scalar</span><span class="o">[</span><span class="kt">Long</span><span class="o">].</span><span class="n">singleOpt</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Read them back and verify</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">r</span> <span class="k">=</span> <span class="nc">SQL</span><span class="s">&quot;&quot;&quot;select * </span>
</span><span class='line'><span class="s">                    from _oat.test_enum </span>
</span><span class='line'><span class="s">                    where id = ${id}&quot;&quot;&quot;</span><span class="o">.</span><span class="n">apply</span><span class="o">().</span><span class="n">head</span>
</span><span class='line'>    <span class="k">val</span> <span class="o">(</span><span class="n">nc</span><span class="o">,</span> <span class="n">so</span><span class="o">)</span> <span class="k">=</span> <span class="o">(</span><span class="n">r</span><span class="o">[</span><span class="kt">String</span><span class="o">](</span><span class="s">&quot;note_category&quot;</span><span class="o">),</span>
</span><span class='line'>                    <span class="n">r</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">]](</span><span class="s">&quot;sort_order&quot;</span><span class="o">))</span>
</span><span class='line'>    <span class="n">assert</span><span class="o">(</span><span class="nc">NoteCategory</span><span class="o">.</span><span class="n">withName</span><span class="o">(</span><span class="n">nc</span><span class="o">)</span> <span class="o">==</span> <span class="nc">NoteCategory</span><span class="o">.</span><span class="nc">Advisor</span><span class="o">)</span>
</span><span class='line'>    <span class="n">assert</span><span class="o">(</span><span class="nc">SortOrder</span><span class="o">.</span><span class="n">withName</span><span class="o">(</span><span class="n">so</span><span class="o">.</span><span class="n">get</span><span class="o">)</span> <span class="o">==</span> <span class="nc">SortOrder</span><span class="o">.</span><span class="nc">Ascending</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The objections to this code include:</p>

<ol>
<li>The call to <code>toString</code> in lines 9 and 10.</li>
<li>The explicit casts required in those same lines.</li>
<li>Reading the values back again as strings in line 18 and 19.</li>
<li>Explicitly converting the strings to enums in lines 20 and 21.</li>
</ol>


<p>Obviously, we want to do better.</p>

<p>But before we dive into improving, a couple of things to note:</p>

<ul>
<li><code>withName</code> (lines 20, 21) converts a string like &ldquo;Auto&rdquo; into the corresponding enumeration value.</li>
<li>In line 19 we use <code>Option[String]</code> because the column is nullable.</li>
</ul>


<h2>Second Attempt:  Using ToStatement and a Column converter</h2>

<p>Anorm uses implicit functions to assist in converting to and from SQL
statements.  We&rsquo;ll start with the <code>ToStatement</code>, which allows us to embed
Scala enumerations in queries easily.  We need a couple of functions in
each Scala enumeration we write, so put <code>createEnumToStatement</code> in a new superclass
and then change the enumerations to extend that class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">DbEnum</span> <span class="k">extends</span> <span class="nc">Enumeration</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="k">def</span> <span class="n">createEnumToStatement</span><span class="o">[</span><span class="kt">E</span><span class="o">]()</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">ToStatement</span><span class="o">[</span><span class="kt">E</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">def</span> <span class="n">set</span><span class="o">(</span><span class="n">s</span><span class="k">:</span> <span class="kt">java.sql.PreparedStatement</span><span class="o">,</span> <span class="n">index</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">aValue</span><span class="k">:</span> <span class="kt">E</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">s</span><span class="o">.</span><span class="n">setObject</span><span class="o">(</span><span class="n">index</span><span class="o">,</span> <span class="n">aValue</span><span class="o">.</span><span class="n">toString</span><span class="o">,</span> <span class="n">java</span><span class="o">.</span><span class="n">sql</span><span class="o">.</span><span class="nc">Types</span><span class="o">.</span><span class="nc">OTHER</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">NoteCategory</span> <span class="k">extends</span> <span class="nc">DbEnum</span> <span class="o">{</span>   <span class="c1">// Extend DbEnum instead of Enumeration</span>
</span><span class='line'>    <span class="o">...</span>        <span class="c1">// same as before</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">implicit</span> <span class="k">val</span> <span class="n">noteCategoryToStatement</span> <span class="k">=</span> <span class="n">createEnumToStatement</span><span class="o">[</span><span class="kt">NoteCategory</span><span class="o">]()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Line 12 is the important one.  When you <code>import NoteCategory._</code> to bring the enum values into
scope, this implicit is also brought into scope and used in the SQL statement to interpolate
a <code>NoteCategory</code> value into the SQL.  The function&rsquo;s name
doesn&rsquo;t matter.  You&rsquo;ll need a similar line for the other enum, of course.</p>

<p>Line 12 is what allows us to drop the casts and the explicit calls to <code>toString</code> in the
insertion SQL, above.  Replace it with the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">sql</span> <span class="k">=</span> <span class="nc">SQL</span><span class="s">&quot;&quot;&quot;insert into _oat.test_enum (note_category, sort_order) </span>
</span><span class='line'><span class="s">        VALUES  (${NoteCategory.Advisor}, ${SortOrder.Ascending}) RETURNING id&quot;&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>createEnumToStatement</code> creates a new object that sets the appropriate value in a JDBC
prepared statement.  If you look at the JavaDoc for <code>java.sql.PreparedStatement</code> you&rsquo;ll see
many <code>set</code> statements:  <code>setInt</code>, <code>setBoolean</code>, <code>setTime</code>, etc.  Unfortunately, <code>setEnum</code> is
not one of them.</p>

<p>The <code>setObject</code> method is interesting.  It includes an extra parameter that allows you to
specify the type of the value.  As you can see in line 4, we use it to pass the enumeration
as a string but with the type of <code>java.sql.Types.OTHER</code>.  Postgres uses that as a clue to
consult the type of the column to do the right thing.</p>

<h3>Adding a Column converter</h3>

<p>The last step is to automatically convert a Postgres enum read from the database into
a Scala enum.  This is done with a <code>Column</code> converter.  Its use parallels that of <code>createEnumToStatement</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">DbEnum</span> <span class="k">extends</span> <span class="nc">Enumeration</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="k">def</span> <span class="n">enumToType</span><span class="o">[</span><span class="kt">E</span><span class="o">](</span><span class="n">convert</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=&gt;</span> <span class="n">E</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">m</span><span class="k">:</span> <span class="kt">Manifest</span><span class="o">[</span><span class="kt">E</span><span class="o">])</span><span class="k">:</span> <span class="kt">Column</span><span class="o">[</span><span class="kt">E</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Column</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="n">meta</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>            <span class="k">val</span> <span class="nc">MetaDataItem</span><span class="o">(</span><span class="n">qualified</span><span class="o">,</span> <span class="n">nullable</span><span class="o">,</span> <span class="n">clazz</span><span class="o">)</span> <span class="k">=</span> <span class="n">meta</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">val</span> <span class="n">s</span> <span class="k">=</span> <span class="n">value</span><span class="o">.</span><span class="n">asInstanceOf</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>
</span><span class='line'>                <span class="n">eitherToError</span><span class="o">(</span><span class="nc">Right</span><span class="o">(</span><span class="n">convert</span><span class="o">(</span><span class="n">s</span><span class="o">)))</span><span class="k">:</span> <span class="kt">MayErr</span><span class="o">[</span><span class="kt">SqlRequestError</span>, <span class="kt">E</span><span class="o">]</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">case</span> <span class="n">e</span><span class="k">:</span> <span class="kt">Exception</span> <span class="o">=&gt;</span>
</span><span class='line'>                <span class="n">eitherToError</span><span class="o">(</span><span class="nc">Left</span><span class="o">(</span><span class="nc">TypeDoesNotMatch</span><span class="o">(</span><span class="s">&quot;Cannot convert &quot;</span> <span class="o">+</span> <span class="n">value</span> <span class="o">+</span> <span class="s">&quot;:&quot;</span> <span class="o">+</span>
</span><span class='line'>                    <span class="n">value</span><span class="o">.</span><span class="n">asInstanceOf</span><span class="o">[</span><span class="kt">AnyRef</span><span class="o">].</span><span class="n">getClass</span> <span class="o">+</span> <span class="s">&quot; to &quot;</span> <span class="o">+</span>
</span><span class='line'>                    <span class="n">m</span><span class="o">.</span><span class="n">runtimeClass</span><span class="o">.</span><span class="n">getSimpleName</span> <span class="o">+</span> <span class="s">&quot;for column &quot;</span> <span class="o">+</span>
</span><span class='line'>                    <span class="n">qualified</span><span class="o">)))</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// createEnumToStatement, as before</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">NoteCategory</span> <span class="k">extends</span> <span class="nc">DbEnum</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// define enum values and use createEnumToStatement, as before</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">implicit</span> <span class="k">val</span> <span class="n">rowToNoteCategory</span> <span class="k">=</span> <span class="n">enumToType</span><span class="o">[</span><span class="kt">NoteCategory</span><span class="o">](</span><span class="nc">NoteCategory</span><span class="o">.</span><span class="n">withName</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some explanatory comments:</p>

<ol>
<li><code>enumToType</code> is again parameterized by the type of the enum.</li>
<li>In line 2 it consumes a function that converts a string (the value read from the database)
into a value of type E (the enum).  For most enumerations this is simply the <code>withName</code> function
that we get for free when defining the enum.  And that is, indeed, what&rsquo;s passed in line 23.</li>
<li>Things can go wrong in two ways:  we might get an unexpected value from the database that
can&rsquo;t be converted by <code>withName</code> (probably indicating that your Postgres enum and Scala enum are
out of synch) and, if things are really borked, we might not even get a string from the database.
Either of these are caught and turned into an error in lines 11-14.</li>
<li>If the column should never have a null value, you can wrap <code>enumToType</code> in line 23 with
<code>Column.nonNull(enumToType...)</code>.  This will throw the familiar &ldquo;Unexpected nullable&rdquo; error if
a null value is found.  If nulls are expected, then read the value as an <code>Option[SortOrder]</code>, for example.</li>
</ol>


<h2>Final Comments</h2>

<p>The <a href="http://bwbecker.github.io/downloads/code/postgres_enums.scala">test program</a> is
self-contained except for the first
import line.  That&rsquo;s what provides some support code to make the database connection.  I&rsquo;ll
write that up soon.</p>

<p>The other imports are</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">anorm._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.postgresql.util.PGobject</span>
</span><span class='line'><span class="k">import</span> <span class="nn">anorm.MayErr._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">java.sql.Connection</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it!  Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hard-Won Introduction]]></title>
    <link href="http://bwbecker.github.io/blog/2015/05/05/hard-won-introduction/"/>
    <updated>2015-05-05T08:14:41-04:00</updated>
    <id>http://bwbecker.github.io/blog/2015/05/05/hard-won-introduction</id>
    <content type="html"><![CDATA[<p>I&rsquo;m doing a lot of development in Scala + Play these days.  I often come up against a problem with a &ldquo;hard won&rdquo; solution.  It might be a fundamental misunderstanding on my part, something I just haven&rsquo;t run into before, or where Googling isn&rsquo;t as helpful as it often is.  Regardless, the solution came at some pain to myself.  To help make that hard won solution less painful, I&rsquo;m posting here to remind me and to help others.</p>

<p>I hope you find it useful.</p>
]]></content>
  </entry>
  
</feed>
